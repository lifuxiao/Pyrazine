import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import andrews_curves
import numpy as np
import os
from PIL import Image
from torchvision import transforms
import torch
from torch.utils.data import Dataset, DataLoader

# Define image transformations
transform = transforms.Compose([
    transforms.ToTensor()  # Convert PIL Image to Tensor
])

# Custom Dataset class to handle image loading and transformations
class CustomDataset(Dataset):
    def __init__(self, csv_file, root_dir, transform=None):
        self.data_frame = pd.read_csv(csv_file)
        self.root_dir = root_dir
        self.transform = transform

    def __len__(self):
        return len(self.data_frame)

    def __getitem__(self, idx):
        img_name = os.path.join(self.root_dir, self.data_frame.iloc[idx, 0])
        image = Image.open(img_name).convert('RGB')  # Ensure 3 channels
        content_label = int(self.data_frame.iloc[idx]['content'])

        if self.transform:
            image = self.transform(image)

        return image, content_label

# Create dataset instance
dataset = CustomDataset(csv_file='E:/分类任务/224_224/含量分类+验证集测试集分类-四甲基吡嗪.csv', root_dir='E:/分类任务/224_224', transform=transform)

# Create DataLoader
data_loader = DataLoader(dataset, batch_size=4, shuffle=True, num_workers=0)

# Helper function to convert DataLoader batches to NumPy arrays
def dataloader_to_numpy(dataloader):
    images, content_labels = [], []
    for imgs, content_lbls in dataloader:
        images.append(imgs.view(imgs.size(0), -1).numpy())  # Flatten images
        content_labels.append(content_lbls.numpy())
    return np.vstack(images), np.concatenate(content_labels)

# Convert DataLoader data to NumPy arrays
X, y = dataloader_to_numpy(data_loader)

# Convert to DataFrame for Andrews Curves
df = pd.DataFrame(X)
df['content'] = y

# Plot Andrews Curves
plt.figure(dpi=400, figsize=(20, 10))
andrews_curves(df, 'content', colormap='viridis')
plt.title('Andrews Curves')
plt.xlabel('Index')
plt.ylabel('Value')

# Save the figure as an SVG file to E drive
plt.savefig('E:/分类任务/Andrews_Curves_Visualization.svg', format='svg')

plt.show()

